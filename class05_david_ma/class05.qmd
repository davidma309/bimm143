---
title: "Class 5: Data visualization"
author: "David (A15967564)"
format: html
---

# Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these let's play with the inbuilt `cars` dataset.

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function:

```{r}
plot(cars)
```

To use `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it?

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I always need at least 3 things:

- **data** (i.e. what I want to plot)
- **aes** (the aesthetic mapping of the data to the plot I want)
- **geom** (i.e. How I want to plot the data)

```{r}
ggplot(data = cars) +
  aes(x = speed, y = dist) +
  geom_point()
```

If I want to add more things I can just keep adding layers, e.g.

```{r}
ggplot(data = cars) +
  aes(x = speed, y = dist) +
  geom_point() + 
  geom_smooth()
```

GGplot is much more verbose than base R plots for standard plots but it has a consistent layer system that I can use to make just about any plot.

Let's make a plot with a straight line fit - i.e. a linear model and no standard error shown.

```{r}
ggplot(data = cars) +
  aes(x = speed, y = dist) +
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Stopping distance vs. speed",
       subtitle = "Utilizing cars dataset available in base R",
       caption = "BIMM143",
       x = "Speed (MPG)",
       y = "Stopping distance (ft)") +
  theme_bw()
```


## A more complicated plot

Let's plot some gene expression data.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. How many genes are in this dataset?

```{r}
nrow(genes)
```

> Q. How can we summarize that last column - the "State" column? I.e. how many genes are up, down, or unchanging?

```{r}
table(genes[, "State"])
```

```{r}
plot <- ggplot(genes) +
          aes(x = Condition1, y = Condition2, col = State) +
          geom_point() +
          labs(title = "Gene expression chnages upon drug treatment",
               x = "Control", y = "Drug treated")
```

I can now just call `plot` when I want to do things, such as specifying the color scale:

```{r}
plot + scale_color_manual( values = c("blue", "gray", "red"))
```

## Going further

Here I read a slightly larger dataset:

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

Comparing life expectancy vs gdpPercap:

```{r}
ggplot(gapminder) +
  aes(x = gdpPercap, y = lifeExp, col = continent) +
  geom_point(alpha = 0.3)
```

A very useful layer to add sometimes is for "faceting":

```{r}
ggplot(gapminder) +
  aes(x = gdpPercap, y = lifeExp, col = continent) +
  geom_point(alpha = 0.3) +
  facet_wrap(~continent)
```

